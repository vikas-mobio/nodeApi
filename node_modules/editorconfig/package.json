{
  "_args": [
    [
      {
        "raw": "editorconfig@^0.15.0",
        "scope": null,
        "escapedName": "editorconfig",
        "name": "editorconfig",
        "rawSpec": "^0.15.0",
        "spec": ">=0.15.0 <0.16.0",
        "type": "range"
      },
      "D:\\wamp64\\www\\js\\APINodejs\\node_modules\\js-beautify"
    ]
  ],
  "_from": "editorconfig@>=0.15.0 <0.16.0",
  "_id": "editorconfig@0.15.0",
  "_inCache": true,
  "_location": "/editorconfig",
  "_nodeVersion": "8.6.0",
  "_npmOperationalInternal": {
    "host": "s3://npm-registry-packages",
    "tmp": "tmp/editorconfig-0.15.0.tgz_1508524646940_0.0406167390756309"
  },
  "_npmUser": {
    "name": "jedmao",
    "email": "jedmao@outlook.com"
  },
  "_npmVersion": "5.3.0",
  "_phantomChildren": {},
  "_requested": {
    "raw": "editorconfig@^0.15.0",
    "scope": null,
    "escapedName": "editorconfig",
    "name": "editorconfig",
    "rawSpec": "^0.15.0",
    "spec": ">=0.15.0 <0.16.0",
    "type": "range"
  },
  "_requiredBy": [
    "/js-beautify"
  ],
  "_resolved": "https://registry.npmjs.org/editorconfig/-/editorconfig-0.15.0.tgz",
  "_shasum": "b6dd4a0b6b9e76ce48e066bdc15381aebb8804fd",
  "_shrinkwrap": null,
  "_spec": "editorconfig@^0.15.0",
  "_where": "D:\\wamp64\\www\\js\\APINodejs\\node_modules\\js-beautify",
  "author": {
    "name": "EditorConfig Team"
  },
  "bin": {
    "editorconfig": "bin/editorconfig"
  },
  "bugs": {
    "url": "https://github.com/editorconfig/editorconfig-core-js/issues"
  },
  "contributors": [
    {
      "name": "Hong Xu",
      "url": "topbug.net"
    },
    {
      "name": "Jed Mao",
      "url": "https://github.com/jedmao/"
    },
    {
      "name": "Trey Hunner",
      "url": "http://treyhunner.com"
    }
  ],
  "dependencies": {
    "@types/commander": "^2.11.0",
    "@types/semver": "^5.4.0",
    "commander": "^2.11.0",
    "lru-cache": "^4.1.1",
    "semver": "^5.4.1",
    "sigmund": "^1.0.1"
  },
  "description": "EditorConfig File Locator and Interpreter for Node.js",
  "devDependencies": {
    "@types/mocha": "^2.2.43",
    "cpy-cli": "^1.0.1",
    "eclint": "^2.4.3",
    "mocha": "^4.0.1",
    "rimraf": "^2.6.2",
    "should": "^13.1.2",
    "tslint": "^5.7.0",
    "typescript": "^2.5.3"
  },
  "directories": {
    "bin": "./bin",
    "lib": "./lib"
  },
  "dist": {
    "integrity": "sha512-j7JBoj/bpNzvoTQylfRZSc85MlLNKWQiq5y6gwKhmqD2h1eZ+tH4AXbkhEJD468gjDna/XMx2YtSkCxBRX9OGg==",
    "shasum": "b6dd4a0b6b9e76ce48e066bdc15381aebb8804fd",
    "tarball": "https://registry.npmjs.org/editorconfig/-/editorconfig-0.15.0.tgz"
  },
  "homepage": "https://github.com/editorconfig/editorconfig-core-js#readme",
  "keywords": [
    "editorconfig",
    "core"
  ],
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "trey",
      "email": "trey@treyhunner.com"
    },
    {
      "name": "jedmao",
      "email": "jed.hunsaker+npm@gmail.com"
    }
  ],
  "name": "editorconfig",
  "optionalDependencies": {},
  "readme": "# EditorConfig JavaScript Core\n\n[![Build Status](https://travis-ci.org/editorconfig/editorconfig-core-js.svg?branch=master)](https://travis-ci.org/editorconfig/editorconfig-core-js)\n\nThe EditorConfig JavaScript core will provide the same functionality as the\n[EditorConfig C Core][] and [EditorConfig Python Core][].\n\n\n## Installation\n\nYou need [node][] to use this package.\n\nTo install the package locally:\n\n```bash\n$ npm install editorconfig\n```\n\nTo install the package system-wide:\n\n```bash\n$ npm install -g editorconfig\n```\n\n## Usage\n\n### in Node.js:\n\n#### parse(filePath[, options])\n\noptions is an object with the following defaults:\n\n```js\n{\n  config: '.editorconfig',\n  version: pkg.version,\n  root: '/'\n};\n```\n\nSearch for `.editorconfig` starting from the current directory to the root directory.\n\nExample:\n\n```js\nvar editorconfig = require('editorconfig');\nvar path = require('path');\nvar filePath = path.join(__dirname, '/sample.js');\nvar promise = editorconfig.parse(filePath);\npromise.then(function onFulfilled(result) {\n  console.log(result);\n});\n\n/*\n  {\n    indent_style: 'space',\n    indent_size: 2,\n    end_of_line: 'lf',\n    charset: 'utf-8',\n    trim_trailing_whitespace: true,\n    insert_final_newline: true,\n    tab_width: 2\n  };\n*/\n```\n\n#### parseSync(filePath[, options])\n\nSynchronous version of `editorconfig.parse()`.\n\n#### parseString(fileContent)\n\nThe `parse()` function above uses `parseString()` under the hood. If you have your file contents\njust pass it to `parseString()` and it'll return the same results as `parse()`.\n\n#### parseFromFiles(filePath, configs[, options])\n\noptions is an object with the following defaults:\n\n```js\n{\n  config: '.editorconfig',\n  version: pkg.version,\n  root: '/'\n};\n```\n\nSpecify the `.editorconfig`.\n\nExample:\n\n```js\nvar editorconfig = require('editorconfig');\nvar fs = require('fs');\nvar path = require('path');\nvar configPath = path.join(__dirname, '/.editorconfig');\nvar configs = [\n  {\n    name: configPath,\n    contents: fs.readFileSync(configPath, 'utf8')\n  }\n];\nvar filePath = path.join(__dirname, '/sample.js');\nvar promise = editorconfig.parseFromFiles(filePath, configs);\npromise.then(function onFulfilled(result) {\n  console.log(result)\n});\n\n/*\n  {\n    indent_style: 'space',\n    indent_size: 2,\n    end_of_line: 'lf',\n    charset: 'utf-8',\n    trim_trailing_whitespace: true,\n    insert_final_newline: true,\n    tab_width: 2\n  };\n*/\n```\n\n#### parseFromFilesSync(filePath, configs[, options])\n\nSynchronous version of `editorconfig.parseFromFiles()`.\n\n### in Command Line\n\n```bash\n$ ./bin/editorconfig\n\n    Usage: editorconfig [OPTIONS] FILEPATH1 [FILEPATH2 FILEPATH3 ...]\n\n    EditorConfig Node.js Core Version 0.11.4-development\n\n    FILEPATH can be a hyphen (-) if you want path(s) to be read from stdin.\n\n    Options:\n\n        -h, --help     output usage information\n        -V, --version  output the version number\n        -f <path>      Specify conf filename other than \".editorconfig\"\n        -b <version>   Specify version (used by devs to test compatibility)\n```\n\nExample:\n\n```bash\n$ ./bin/editorconfig /home/zoidberg/humans/anatomy.md\ncharset=utf-8\ninsert_final_newline=true\nend_of_line=lf\ntab_width=8\ntrim_trailing_whitespace=sometimes\n```\n\n## Development\n\nTo install dependencies for this package run this in the package directory:\n\n```bash\n$ npm install\n```\n\nNext, run:\n\n```bash\n$ npm link\n```\n\nThe global editorconfig will now point to the files in your development\nrepository instead of a globally-installed version from npm. You can now use\neditorconfig directly to test your changes.\n\nIf you ever update from the central repository and there are errors, it might\nbe because you are missing some dependencies. If that happens, just run npm\nlink again to get the latest dependencies.\n\nTo test the command line interface:\n\n```bash\n$ editorconfig <filepath>\n```\n\n# Testing\n\n[CMake][] must be installed to run the tests.\n\nTo run the tests:\n\n```bash\n$ npm test\n```\n\nTo run the tests with increased verbosity (for debugging test failures):\n\n```bash\n$ npm run-script test-verbose\n```\n\n[EditorConfig C Core]: https://github.com/editorconfig/editorconfig-core\n[EditorConfig Python Core]: https://github.com/editorconfig/editorconfig-core-py\n[node]: http://nodejs.org/\n[cmake]: http://www.cmake.org\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git://github.com/editorconfig/editorconfig-core-js.git"
  },
  "scripts": {
    "build": "tsc",
    "clean": "rimraf dist",
    "copy": "cpy package.json .npmignore LICENSE README.md CHANGELOG.md dist && cpy src/bin/* dist/bin && cpy src/lib/fnmatch*.* dist/lib",
    "eclint": "eclint check --indent_size ignore \"src/**\"",
    "lint": "npm run eclint && npm run tslint",
    "prebuild": "npm run clean",
    "prepub": "npm run lint && npm run build && npm run copy",
    "pretest": "npm run lint && npm run build && npm run copy && cmake .",
    "pretest:ci": "npm run pretest",
    "pub": "npm publish ./dist",
    "test": "ctest .",
    "test:ci": "ctest -VV --output-on-failure .",
    "tslint": "tslint --project tslint.json"
  },
  "version": "0.15.0"
}
